This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
cli_hooks/
  validator_invoker.ts
schemas/
  pipeline_config_schema.ts
  universal_signal_schema.backup.ts
  universal_signal_schema.mjs
  universal_signal_schema.ts
signal_schema_test/
  package.json
  pipeline_config_schema.test.ts
  signal_schema.test.ts
  universal_signal_schema.ts
tests/
  mentor_registry.test.ts
  poi_validator.test.ts
validators/
  mock/
    signal.json
  PoIValidator.ts
  SignalValidator.tsx
  useSignalEvaluation.ts
.afi-codex
.gitignore
init_repo.sh
LICENSE
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="schemas/pipeline_config_schema.ts">
import { z } from "zod";

/* ---------- SCHEMA ---------- */
export const PipelineConfigSchema = z.object({
  enabled: z.boolean().default(true),
  providers: z.array(z.string()).optional(),
  symbols: z.array(z.string()).optional(),
  engines: z.array(z.string()).optional(),
  timeframes: z.array(z.string()).optional(),
  scoreThreshold: z.number().min(0).max(100).optional(),
  maxOpenSignals: z.number().min(1).optional(),
  realtimeTransport: z
    .object({
      transport: z.enum(["ably", "socketio"]),
      ably: z
        .object({
          key: z.string().optional(),
          channel: z.string().optional(),
        })
        .optional(),
      socketio: z
        .object({
          namespace: z.string().default("/pipeline"),
          path: z.string().optional(),
        })
        .optional(),
    })
    .optional(),
});

/* ---------- RUNTIME TYPE ---------- */
export type PipelineConfig = z.infer<typeof PipelineConfigSchema>;

/* ---------- EVENT INTERFACES ---------- */
export interface ServerToClientEvents {
  config_update: (cfg: PipelineConfig) => void;
}

export interface ClientToServerEvents {
  set_config: (partial: Partial<PipelineConfig>, ack: (ok: boolean) => void) => void;
}
</file>

<file path="schemas/universal_signal_schema.backup.ts">
import { z } from "zod";

/* ---------- ENUMS ---------- */
export const SignalActionSchema = z.enum(["buy", "sell"]);
export const SignalStrengthSchema = z.enum(["low", "medium", "high", "very-high"]);
export const SignalTimeframeSchema = z.enum(["1m","5m","15m","30m","1h","4h","1d","1w"]);
export const SignalSourceSchema  = z.enum(["manual","bot","tradingview"]);
export const MarketSchema        = z.enum(["crypto","forex","stocks","commodities","futures"]);
export const IndicatorNameSchema = z.enum([
  "RSI","MACD","Moving Average","Bollinger Bands","OBV","ATR","Stochastic","Volume"
]);

/* ---------- COMPONENTS ---------- */
export const SignalIndicatorSchema = z.object({
  name: IndicatorNameSchema,
  value: z.union([z.number(), z.string()]),
  timeframe: SignalTimeframeSchema.optional(),
});

export const SignalAnalysisSchema = z.object({
  type: z.string(),
  result: z.union([z.string(), z.number()]),
  confidence: z.number().min(0).max(100).optional(),
});

export const PatternAnalysisSchema = z.object({
  pattern: z.string(),
  confidence: z.number().min(0).max(100),
  description: z.string().optional(),
});

export const FuturesContractDataSchema = z.object({
  contractSize: z.number().positive(),
  leverage: z.number().positive(),
  marginType: z.enum(["isolated","cross"]),
  expiryDate: z.string().datetime().optional(),
});

/* ---------- BASE ---------- */
export const BaseSignalSchema = z.object({
  id: z.string(),
  symbol: z.string(),
  market: MarketSchema,
  action: SignalActionSchema,
  price: z.number().positive(),
  timestamp: z.number().int().positive(),
  source: SignalSourceSchema,
});

/* ---------- COMPLETE ---------- */
export const SignalSchema = BaseSignalSchema.extend({
  targetPrice: z.number().positive(),
  stopLoss: z.number().positive(),
  timeframe: SignalTimeframeSchema,
  strength: SignalStrengthSchema,
  indicators: z.array(SignalIndicatorSchema),
  analysis: z.array(SignalAnalysisSchema),
  patternAnalysis: PatternAnalysisSchema.optional(),
  takeProfitLevels: z.array(z.number().positive()).optional(),
  riskRewardRatio: z.number().positive().optional(),
  futuresData: FuturesContractDataSchema.optional(),
  score: z.number().min(0).max(100),
  notes: z.string().optional(),
  userId: z.string().optional(),
  subscribed: z.boolean(),
});

/* ---------- PIPELINE VARIANTS ---------- */
export const IndicatorDataSchema = z.object({
  name: z.string(),
  value: z.union([z.number(), z.array(z.number()), z.record(z.string(), z.number())]),
  timeframe: z.string(),
  timestamp: z.number().int().positive(),
  meta: z.record(z.string(), z.any()).optional(),
});

export const RawSignalSchema = BaseSignalSchema.extend({
  timeframe: SignalTimeframeSchema.optional(),
  pattern: z.string().optional(),
  status: z.literal("new"),
});

export const EnrichedSignalSchema = BaseSignalSchema.extend({
  timeframe: SignalTimeframeSchema,
  pattern: z.string().optional(),
  indicators: z.record(z.string(), IndicatorDataSchema),
  status: z.literal("enriched"),
});

export const AnalyzedSignalSchema = EnrichedSignalSchema.extend({
  analysis: z.object({
    patternConfidence: z.number().min(0).max(100).optional(),
    trendStrength: z.number().min(0).max(100).optional(),
    supportLevel: z.number().positive().optional(),
    resistanceLevel: z.number().positive().optional(),
    volumeAnalysis: z.string().optional(),
    riskLevel: z.enum(["low","medium","high"]).optional(),
    comments: z.string().optional(),
  }),
  status: z.literal("analyzed"),
});

export const ScoredSignalSchema = AnalyzedSignalSchema.extend({
  score: z.object({
    overall: z.number().min(0).max(100),
    technical: z.number().min(0).max(100),
    fundamental: z.number().min(0).max(100).optional(),
    sentiment: z.number().min(0).max(100).optional(),
    breakdown: z.record(z.string(), z.number()),
  }),
  status: z.literal("scored"),
});

/* ---------- CONFIG ---------- */
export const PipelineConfigSchema = z.object({
  enabled: z.boolean(),
  enrichment: z.object({
    providers: z.array(z.string()),
    indicators: z.array(z.string()),
    timeframes: z.array(z.string()),
  }),
  analysis: z.object({
    providers: z.array(z.string()),
    methods: z.array(z.string()),
  }),
  scoring: z.object({
    providers: z.array(z.string()),
    weights: z.record(z.string(), z.number()),
    threshold: z.number().min(0).max(100),
  }),
});

/* ---------- EXPORTS ---------- */
export {
  SignalSchema,
  BaseSignalSchema,
  RawSignalSchema,
  EnrichedSignalSchema,
  AnalyzedSignalSchema,
  ScoredSignalSchema,
  PipelineConfigSchema,
};
</file>

<file path="schemas/universal_signal_schema.ts">
import { z } from "zod";

/* ---------- ENUMS ---------- */
export const Action  = z.enum(["buy", "sell", "alert", "info"]);
export const Source  = z.enum(["tradingview", "bot", "manual"]);
export const Market  = z.enum(["crypto", "forex", "stocks", "commodities", "futures"]);

/* ---------- MAIN SCHEMA ---------- */
export const SignalSchema = z.object({
  id: z.string().optional(),
  timestamp: z.number().default(() => Date.now()),

  /* origin */
  source: Source.default("tradingview"),
  symbol: z.string(),
  market: Market.optional(),

  /* core */
  action: Action,
  strategy: z.string().optional(),   // Pine strategy name
  scriptId: z.string().optional(),   // unique script hash

  /* price block */
  price:        z.number().optional(),
  targetPrice:  z.number().optional(),
  stopLoss:     z.number().optional(),

  /* meta */
  timeframe: z.string().optional(),
  strength:  z.union([z.string(), z.number()]).optional(),

  /* indicators */
  indicators: z.array(
    z.object({
      name: z.string(),
      value: z.any(),
      timeframe: z.string().optional()
    })
  ).optional(),

  /* analysis */
  analysis: z.array(
    z.object({
      type: z.string(),
      result: z.string(),
      confidence: z.number().min(0).max(100).optional()
    })
  ).optional(),

  /* free-form */
  note:       z.string().optional(), // Pine alert_message
  subscribed: z.boolean().optional() // true / false only
});
</file>

<file path="signal_schema_test/package.json">
{
  "name": "afi-signal-schema-test",
  "private": true,
  "type": "module",
  "scripts": {
    "test": "tsx signal_schema.test.ts"
  },
  "devDependencies": {
    "tsx": "^4.20.3",
    "typescript": "^5.8.3",
    "zod": "^3.25.67"
  }
}
</file>

<file path="signal_schema_test/pipeline_config_schema.test.ts">
import { PipelineConfigSchema } from "../schemas/pipeline_config_schema";

const config = {
  enabled: true,
  providers: ["tradingview"],
  symbols: ["BTCUSDT", "ETHUSDT"],
  engines: ["pine"],
  timeframes: ["1h", "4h"],
  scoreThreshold: 80,
  maxOpenSignals: 5,
  realtimeTransport: {
    transport: "socketio",
    socketio: {
      namespace: "/pipeline",
    },
  },
};

const parsed = PipelineConfigSchema.safeParse(config);
console.log("Validation result:", parsed);
</file>

<file path="signal_schema_test/universal_signal_schema.ts">
import { z } from "zod";

/* ---------- ENUMS ---------- */
export const SignalActionSchema = z.enum(["buy", "sell"]);
export const SignalStrengthSchema = z.enum(["low", "medium", "high", "very-high"]);
export const SignalTimeframeSchema = z.enum(["1m","5m","15m","30m","1h","4h","1d","1w"]);
export const SignalSourceSchema  = z.enum(["manual","bot","tradingview"]);
export const MarketSchema        = z.enum(["crypto","forex","stocks","commodities","futures"]);
export const IndicatorNameSchema = z.enum([
  "RSI","MACD","Moving Average","Bollinger Bands","OBV","ATR","Stochastic","Volume"
]);

/* ---------- COMPONENTS ---------- */
export const SignalIndicatorSchema = z.object({
  name: IndicatorNameSchema,
  value: z.union([z.number(), z.string()]),
  timeframe: SignalTimeframeSchema.optional(),
});

export const SignalAnalysisSchema = z.object({
  type: z.string(),
  result: z.union([z.string(), z.number()]),
  confidence: z.number().min(0).max(100).optional(),
});

export const PatternAnalysisSchema = z.object({
  pattern: z.string(),
  confidence: z.number().min(0).max(100),
  description: z.string().optional(),
});

export const FuturesContractDataSchema = z.object({
  contractSize: z.number().positive(),
  leverage: z.number().positive(),
  marginType: z.enum(["isolated","cross"]),
  expiryDate: z.string().datetime().optional(),
});

/* ---------- BASE ---------- */
export const BaseSignalSchema = z.object({
  id: z.string(),
  symbol: z.string(),
  market: MarketSchema,
  action: SignalActionSchema,
  price: z.number().positive(),
  timestamp: z.number().int().positive(),
  source: SignalSourceSchema,
});

/* ---------- COMPLETE ---------- */
export const SignalSchema = BaseSignalSchema.extend({
  targetPrice: z.number().positive(),
  stopLoss: z.number().positive(),
  timeframe: SignalTimeframeSchema,
  strength: SignalStrengthSchema,
  indicators: z.array(SignalIndicatorSchema),
  analysis: z.array(SignalAnalysisSchema),
  patternAnalysis: PatternAnalysisSchema.optional(),
  takeProfitLevels: z.array(z.number().positive()).optional(),
  riskRewardRatio: z.number().positive().optional(),
  futuresData: FuturesContractDataSchema.optional(),
  score: z.number().min(0).max(100),
  notes: z.string().optional(),
  userId: z.string().optional(),
  subscribed: z.boolean(),
});

/* ---------- PIPELINE VARIANTS ---------- */
export const IndicatorDataSchema = z.object({
  name: z.string(),
  value: z.union([z.number(), z.array(z.number()), z.record(z.string(), z.number())]),
  timeframe: z.string(),
  timestamp: z.number().int().positive(),
  meta: z.record(z.string(), z.any()).optional(),
});

export const RawSignalSchema = BaseSignalSchema.extend({
  timeframe: SignalTimeframeSchema.optional(),
  pattern: z.string().optional(),
  status: z.literal("new"),
});

export const EnrichedSignalSchema = BaseSignalSchema.extend({
  timeframe: SignalTimeframeSchema,
  pattern: z.string().optional(),
  indicators: z.record(z.string(), IndicatorDataSchema),
  status: z.literal("enriched"),
});

export const AnalyzedSignalSchema = EnrichedSignalSchema.extend({
  analysis: z.object({
    patternConfidence: z.number().min(0).max(100).optional(),
    trendStrength: z.number().min(0).max(100).optional(),
    supportLevel: z.number().positive().optional(),
    resistanceLevel: z.number().positive().optional(),
    volumeAnalysis: z.string().optional(),
    riskLevel: z.enum(["low","medium","high"]).optional(),
    comments: z.string().optional(),
  }),
  status: z.literal("analyzed"),
});

export const ScoredSignalSchema = AnalyzedSignalSchema.extend({
  score: z.object({
    overall: z.number().min(0).max(100),
    technical: z.number().min(0).max(100),
    fundamental: z.number().min(0).max(100).optional(),
    sentiment: z.number().min(0).max(100).optional(),
    breakdown: z.record(z.string(), z.number()),
  }),
  status: z.literal("scored"),
});

/* ---------- CONFIG ---------- */
export const PipelineConfigSchema = z.object({
  enabled: z.boolean(),
  enrichment: z.object({
    providers: z.array(z.string()),
    indicators: z.array(z.string()),
    timeframes: z.array(z.string()),
  }),
  analysis: z.object({
    providers: z.array(z.string()),
    methods: z.array(z.string()),
  }),
  scoring: z.object({
    providers: z.array(z.string()),
    weights: z.record(z.string(), z.number()),
    threshold: z.number().min(0).max(100),
  }),
});

/* ---------- EXPORTS ---------- */
export {
  SignalSchema,
  BaseSignalSchema,
  RawSignalSchema,
  EnrichedSignalSchema,
  AnalyzedSignalSchema,
  ScoredSignalSchema,
  PipelineConfigSchema,
};
</file>

<file path=".github/workflows/ci.yml">
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: echo "CI workflow initialized"
</file>

<file path="cli_hooks/validator_invoker.ts">
// Invokes PoIValidator and MentorRegistry from afi-core
export const invokePoIValidator = () => {
  console.log("PoIValidator invoked.");
};

export const invokeMentorRegistry = () => {
  console.log("MentorRegistry registered.");
};
</file>

<file path="schemas/universal_signal_schema.mjs">
import { z } from "zod";

export const SignalSchema = z.object({
  id: z.string().optional(),
  symbol: z.string(),
  market: z.string().optional(),
  action: z.enum(["buy", "sell", "hold"]),
  price: z.number().optional(),
  timestamp: z.union([z.number(), z.string()]).optional(),
  source: z.string().optional(),
  strategy: z.string().optional(),
  notes: z.string().optional(),
  targetPrice: z.number().optional(),
  stopLoss: z.number().optional(),
  timeframe: z.string().optional(),
  strength: z.enum(["low", "medium", "high"]).optional(),

  indicators: z.array(
    z.object({
      name: z.string(),
      value: z.union([z.string(), z.number(), z.boolean(), z.null()]),
      timeframe: z.string().optional(),
    })
  ).optional(),

  analysis: z.array(
    z.object({
      type: z.string(),
      result: z.string(),
      confidence: z.number().optional(),
    })
  ).optional(),

  subscribed: z.boolean().optional(),
  score: z.number().optional(),
});
</file>

<file path="signal_schema_test/signal_schema.test.ts">
import { SignalSchema } from '../schemas/universal_signal_schema.mjs';

const exampleSignal = {
  id: "abc123",
  symbol: "BTCUSDT",
  market: "crypto",
  action: "buy",
  price: 30300.55,
  timestamp: Date.now(),
  source: "bot",
  strategy: "Scalping RSI Divergence",
  notes: "Alert triggered after RSI crosses 30 on 1h",
  targetPrice: 32500.00,
  stopLoss: 29500.00,
  timeframe: "1h",
  strength: "high",
  indicators: [
    { name: "RSI", value: 70, timeframe: "1h" },
    { name: "MACD", value: "bullish", timeframe: "1h" }
  ],
  analysis: [
    { type: "trend", result: "up", confidence: 90 }
  ],
  score: 88,
  subscribed: true
};

const result = SignalSchema.safeParse(exampleSignal);
if (result.success) {
  console.log("✅ Signal validated successfully.");
} else {
  console.error("❌ Validation failed:", result.error.format());
  process.exit(1);
}
</file>

<file path="tests/mentor_registry.test.ts">
/**
 * 🧪 Mentor Registry Unit Test
 * ------------------------------------------
 * Tests mentor registration and signal-tag pairing logic
 */

import { MentorRegistry } from '../runtime/mentor_registry';

describe('MentorRegistry', () => {
  let registry: MentorRegistry;

  beforeEach(() => {
    registry = new MentorRegistry();
  });

  test('registers and retrieves mentor by ID', async () => {
    const mentor = { id: 'm-001', name: 'Athena', tags: ['macro'], active: true };
    await registry.registerMentor(mentor);

    const found = await registry.getMentorById('m-001');
    expect(found?.name).toBe('Athena');
  });

  test('retrieves mentors by tag', async () => {
    await registry.registerMentor({ id: 'm-002', name: 'Hermes', tags: ['sentiment'], active: true });

    const mentors = await registry.getMentorsByTag('sentiment');
    expect(mentors.length).toBeGreaterThan(0);
  });

  test('pairs mentor based on matching tag', async () => {
    await registry.registerMentor({ id: 'm-003', name: 'Apollo', tags: ['risk'], active: true });

    const match = await registry.simulateMentorPairing(['risk']);
    expect(match?.name).toBe('Apollo');
  });

  test('returns null when no mentors match', async () => {
    const match = await registry.simulateMentorPairing(['nonexistent']);
    expect(match).toBeNull();
  });
});
</file>

<file path="tests/poi_validator.test.ts">
import { PoIValidator } from '../validators/PoIValidator';

describe('PoIValidator', () => {
  it('scores numeric signals higher', () => {
    const withNum = PoIValidator.evaluate({ id:'1', content:'BTC +5% on volume 2.3B'} as any);
    const noNum   = PoIValidator.evaluate({ id:'2', content:'Macro rumblings ahead'} as any);

    expect(withNum.insightScore).toBeGreaterThan(noNum.insightScore);
    expect(withNum.confidence).toBeGreaterThan(0.5);
  });
});
</file>

<file path="validators/mock/signal.json">
{
  "id": "demo-001",
  "content": "Price spike detected on BTC/USDT."
}
</file>

<file path="validators/PoIValidator.ts">
/**
 * PoIValidator – advanced sample validator
 * ----------------------------------------
 * Evaluates a SignalPayload and produces:
 *  • insightScore  (0‑100)
 *  • confidence    (0‑1)
 *  • tags[]        (derived risk / sentiment tags)
 *
 * This is MVP logic – replace with ML / on‑chain calls later.
 */
import { SignalPayload } from '../runtime/types';

export interface PoIResult {
  insightScore: number;
  confidence: number;
  derivedTags: string[];
  notes?: string;
}

export class PoIValidator {
  static evaluate(signal: SignalPayload): PoIResult {
    // very naive heuristics for demo purposes
    const lengthFactor = Math.min(signal.content.length / 280, 1);   // tweet‑sized bias
    const hasNumbers  = /\d/.test(signal.content) ? 1 : 0.6;
    const sentiment   = /risk|alert|warning/i.test(signal.content) ? 'risk' : 'macro';

    const insightScore = Math.round(100 * lengthFactor * hasNumbers);
    const confidence   = Number((0.4 + 0.6 * lengthFactor).toFixed(2));

    return {
      insightScore,
      confidence,
      derivedTags: [sentiment],
      notes: `LengthFactor=${lengthFactor.toFixed(2)}, numeric=${!!hasNumbers}`
    };
  }
}
</file>

<file path="validators/SignalValidator.tsx">
/* SignalValidator.tsx
   Basic scaffold for AFI's Signal Validation UI component.
   Replace mock hooks with real API once available. */
import React, { useState } from 'react';

interface SignalPayload { id: string; content: string; }

interface Props {
  signal: SignalPayload;
  onScore: (score: number) => void;
}

const SignalValidator: React.FC<Props> = ({ signal, onScore }) => {
  const [score, setScore] = useState<number>(0);
  return (
    <div style={{border:'1px solid #ccc', padding:'1rem', borderRadius:8}}>
      <h2>Validate Signal #{signal.id}</h2>
      <pre style={{background:'#111', color:'#eee', padding:'0.5rem'}}>{signal.content}</pre>
      <input type='number' min={0} max={100} value={score}
             onChange={e => setScore(parseInt(e.target.value))}/>
      <button onClick={()=>onScore(score)}>Submit</button>
    </div>
  );
};
export default SignalValidator;
</file>

<file path="validators/useSignalEvaluation.ts">
import { useState, useEffect } from 'react';
interface SignalPayload { id: string; content: string; }

export function useSignalEvaluation() {
  const [signal, setSignal] = useState<SignalPayload|null>(null);
  const [loading, setLoading] = useState(true);
  useEffect(()=>{
    async function fetchMock(){
      const resp = await import('../mock/signal.json');
      setSignal(resp.default as SignalPayload);
      setLoading(false);
    }
    fetchMock();
  },[]);
  return { signal, loading };
}
</file>

<file path=".afi-codex">
{
  "name": "afi-core",
  "role": "runtime",
  "description": "Core runtime for agent signal validation in AFI Protocol",
  "language": "TypeScript",
  "tags": ["validator", "mentor", "runtime", "afi", "typescript"],
  "entry": "runtime/mentor_registry.ts",
  "factory_ready": true
}
</file>

<file path=".gitignore">
.DS_Store
node_modules
.env
</file>

<file path="init_repo.sh">
#!/bin/bash
git init
git remote add origin git@github.com:AFI-Protocol/afi-core.git
git add .
git commit -m "Initial commit for afi-core"
git push -u origin main
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 AFI Protocol

Permission is hereby granted, free of charge, to any person obtaining a copy...
[Truncated for brevity]
</file>

<file path="README.md">
# 🧠 AFI Core

Welcome to `afi-core`, the neural spine of the AFI Protocol’s agentic intelligence system. This module contains core logic for processing and evaluating market signals—laying the groundwork for decentralized financial reasoning.

### 📦 What's Inside

- **Signal Validators** – Deterministic modules to vet raw input before scoring  
- **Evaluation Hooks** – `useSignalEvaluation` for runtime signal quality checks  
- **Mock Data** – Lightweight test fixtures for local testing  
- **Tests** – Sample unit tests for core components

### 🗂 Structure

```
validators/         # SignalValidator + runtime hooks  
tests/              # Unit tests for validators  
init_repo.sh        # Repo setup automation
```

### 🚀 Quick Start

```bash
pnpm install
pnpm test
```

### 🧩 Part of the Modular AFI Ecosystem

`afi-core` is one of several composable modules in the Agentic Financial Intelligence Protocol. Other modules include:

- `afi-agents` – Persona logic and mentor pairing  
- `afi-infra` – Infra bus + observer daemons  
- `afi-cli` – Command-line agent interface  
- `afi-docs` – Specs and documentation

For architecture, see [AFI Protocol Docs](https://github.com/AFI-Protocol/afi-docs)

---

🛡 Maintained by the AFI Core Team  
🔗 [afi-protocol.github.io](https://afi-protocol.github.io) _(coming soon)_
</file>

</files>
